apiVersion: v1
kind: ConfigMap
metadata:
  name: app-allatone-sync-check
  namespace: argocd
data:
  get-argocd-app-allatone.sh: |
    #!/bin/bash

    # Define the applications to monitor
    APPLICATIONS=("ecrapp-one-wave-ns1" "ecrapp-one-wave-ns2")

    # Check for status of each application until all conditions are met
    kubectl patch application.argoproj.io ecrapp-one-wave-ns1 ecrapp-one-wave-ns2 ecrapp-one-wave-ns3 --type merge -p '{"spec": {"syncPolicy": {"automated": {"prune": true, "selfHeal": true}}}}'
    
    while true; do
      all_synced=true

      for app in "${APPLICATIONS[@]}"; do
        # Fetch application statuses
        
        healthStatus=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.health.status}')
        syncStatus=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.sync.status}')
        lastSyncResult=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.operationState.phase}')

        # Check if the status is as expected
        if [[ "$healthStatus" == "Healthy" && "$syncStatus" == "Synced" && "$lastSyncResult" == "Succeeded" ]]; then
          #completionTime=$(date '+%Y-%m-%d %H:%M:%S')
          echo "Application $app is Healthy, Synced, and Last Sync is OK"
        else
          echo "Application $app is not in the desired state. Health: $healthStatus, Sync: $syncStatus, Last Sync: $lastSyncResult"
          all_synced=false
          break
        fi
        # Fetch required details using kubectl
        appcreation=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.metadata.creationTimestamp}')
        appdeployStartedAt=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.history[0].deployStartedAt}')
        appdeployedAt=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.history[0].deployedAt}')
        appfinishedAt=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.operationState.finishedAt}')
        appreconciledAt=$(kubectl get application.argoproj.io "$app" -o jsonpath='{.status.reconciledAt}')
        
        # Display the results
        echo "$app | Creation Timestamp: $appcreation | Deploy Started At: $appdeployStartedAt | Deployed At: $appdeployedAt | Finished At: $appfinishedAt | Reconciled At: $appreconciledAt"
      done

      # If all applications are in the desired state, exit the loop
      if [ "$all_synced" == true ]; then
        echo "All applications are in the desired state."
        break
      else
        echo "Waiting for applications to reach the desired state..."
      fi

      # Wait before checking again
      sleep 30
    done

---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-allatone-sync-job
  namespace: argocd
  # annotations:
  #   argocd.argoproj.io/hook: PostSync
  #   #argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: rolling-sync-app-status-sa
      containers:
      - name: argocd-app-allatone-sync
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "/allatone-scripts/get-argocd-app-allatone.sh"]
        volumeMounts:
        - name: script-volume-allatone
          mountPath: /allatone-scripts
          readOnly: true
      restartPolicy: Never
      volumes:
      - name: script-volume-allatone
        configMap:
          name: app-allatone-sync-check
          items:
            - key: get-argocd-app-allatone.sh
              path: get-argocd-app-allatone.sh
  backoffLimit: 1
