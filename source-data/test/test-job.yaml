apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-app-read-role
  namespace: argocd  # The namespace where Argo CD is installed
rules:
  - apiGroups: ["argoproj.io"]
    resources: ["applications"]
    verbs: ["get", "list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-app-status-sa
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-app-read-rolebinding
  namespace: argocd  # The namespace where Argo CD is installed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-app-read-role
subjects:
  - kind: ServiceAccount
    name: argocd-app-status-sa
    namespace: argocd
---
apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-app-status-job
  namespace: argocd
spec:
  template:
    spec:
      serviceAccountName: argocd-app-status-sa  # Use the ServiceAccount with permissions
      containers:
      - name: argocd-app-status
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "/scripts/get-argocd-app-status.sh"]
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
          readOnly: true
        - name: applicationlist
          mountPath: /other-scripts
          readOnly: true
      restartPolicy: Never
      volumes:
      - name: script-volume
        configMap:
          name: argocd-app-status-script
          items:
            - key: get-argocd-app-status.sh
              path: get-argocd-app-status.sh
      - name: applicationlist
        configMap:
          name: applicationlist-configmap
          items:
            - key: applicationlist
              path: applicationlist
              
  backoffLimit: 1
